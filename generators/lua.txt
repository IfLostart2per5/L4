program {
  self:write("--generated lua code\n")
  for i = 1, #node do
    self:generate(node[i])
  end
};
extern {
  self.funcs[node.name] = self:getglobal()[node.name]
};
block {
  if not node.name then
    self:write("do\n")
  else
    self:write("::" .. node.name .. "::\n")
  end
  for _, s in ipairs(node.body) do
    self:generate(s)
    self:write("\n")
  end
  if node.name then
    self:write("--::"..node.name.."::\n")
  else
    self:write("end\n")
  end
};
binop {
  self:write("(")
  self:generate(node.left)
  --self:show(node.op)
  self:write(node.op)
  self:generate(node.right)
  self:write(")")
};
func {
  self:write("function "..node.name.."(" .. table.concat(node.params, ", ") .. ")\n")
  local start = #self.code
  for _, i in ipairs(node.body) do
    self:generate(i)
  end

  self:write("end\n")
  local finale = #self.code

  local fcode = table.concat(self.code, "", start, finale)
  self:show(fcode)
  local f = load(fcode, node.name, nil, extends(self.funcs, self.env))
  f()
  self.funcs["*"..node.name] = node
};
assign {
--self:show(node.seubokuga)
  self:write("local "..node.name.." = ")
  self:generate(node.val)
};
return {
  self:write("return ")
  self:generate(node.arg)
  self:write("\n")
};
int {
  self:write("" .. node.value)
};
float {
  self:write("" .. node.value)
};
str {
  self:write('"' .. node.value:gsub("\n", "\\n"):
                    gsub("\t", "\\t"):
		    gsub("\"", '"') .. '"')
};
id {
  --self:show(node.name)
  self:write(node.name)
};
call {
  self:generate(node.caller)
  self:write("(")
  for i, a in ipairs(node.args) do
    self:generate(a)
    if i < #node.args then
      self:write(", ")
    end
  end
  self:write(")")
};
nogenerate { }
